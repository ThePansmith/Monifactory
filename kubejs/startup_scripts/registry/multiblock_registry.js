/**
 * Multiblock Registry.
 * This is the place custom multiblock recipes (Like Discharging) are defined.
 * It is also where
 */
const Tags = Java.loadClass('dev.latvian.mods.kubejs.util.Tags')
const FusionReactorMachine = Java.loadClass("com.gregtechceu.gtceu.common.machine.multiblock.electric.FusionReactorMachine")

GTCEuStartupEvents.registry('gtceu:recipe_type', event => {

    // Normal mode-exclusive Multis
    if (!isHardMode) {
        // Simulation Supercomputer
        event.create('simulation_supercomputer')
            .category('multiblock')
            .setEUIO('in')
            .setMaxIOSize(2, 2, 0, 0)
            .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
            .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
            .setSound(GTSoundEntries.COMPUTATION)
            .setSound(GTSoundEntries.ASSEMBLER)

        // Loot Superfabricator
        event.create('loot_superfabricator')
            .category('multiblock')
            .setEUIO('in')
            .setMaxIOSize(2, 1, 0, 0)
            .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
            .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
            .setSound(GTSoundEntries.COMPUTATION)
    }


    // Hard mode-exclusive Multis
    if (!isNormalMode) {
        // Actualization Chamber
        event.create('actualization_chamber')
            .category('multiblock')
            .setEUIO('in')
            .setMaxIOSize(2, 20, 0, 0)
            .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
            .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
            .setSound(GTSoundEntries.COOLING)

        // Universal Crystallizer
        event.create('universal_crystallizer')
            .category('multiblock')
            .setEUIO('in')
            .setMaxIOSize(9, 1, 1, 0)
            .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
            .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
            .setSound(GTSoundEntries.COMPUTATION)
    }


    // Small Microverse Projector Recipe Type
    event.create('basic_microverse')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(4, 20, 1, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.COOLING);

    // Advanced Microverse Projector Recipe Type
    event.create('advanced_microverse')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(4, 16, 0, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.COOLING);

    // Advanced Microverse Projector II Recipe Type
    event.create('advanced_microverse_ii')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(8, 16, 0, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.COOLING);

    // Advanced Microverse Projector III Recipe Type
    event.create('advanced_microverse_iii')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(12, 16, 0, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.COOLING);

    // Naquadah Reactor I Recipe type
    event.create('naquadah_reactor_i')
        .category('multiblock')
        .setEUIO('out')
        .setMaxIOSize(1, 1, 0, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.ARC);

    // Naqudah Reactor II Recipe Type
    event.create('naquadah_reactor_ii')
        .category('multiblock')
        .setEUIO('out')
        .setMaxIOSize(1, 1, 0, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.ARC);

    // Greenhouse
    event.create('greenhouse')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(3, 3, 1, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.TURBINE)

    // Subatomic Digital Assembler
    event.create('subatomic_digital_assembly')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(2, 1, 0, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.COOLING)

    // Large Material Press
    event.create('large_material_press')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(6, 1, 0, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_COMPRESS, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.COMPRESSOR)
        .setIconSupplier(() => Item.of('gtceu:large_material_press'))

    // Omnic Forge
    event.create('omnic_forge')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(6, 1, 0, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_CRYSTALLIZATION, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.ARC)

    // Quintessence Infuser
    event.create('quintessence_infuser')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(2, 2, 1, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.CENTRIFUGE)

    // Rock Cycle Simulator
    event.create('rock_cycle_simulator')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(1, 1, 0, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_MACERATE, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.MINER)

    // Discharger
    event.create('discharger')
        .category('multiblock')
        .setEUIO('out')
        .setMaxIOSize(9, 1, 0, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.ELECTROLYZER)

    // Cryococcal Reverberator
    event.create('reverberation')
        .category('multiblock')
        .setEUIO('out')
        .setMaxIOSize(2, 0, 0, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.REPLICATOR)
})

GTCEuStartupEvents.registry('gtceu:machine', event => {

    GCyMMachines.LARGE_MATERIAL_PRESS.setRecipeTypes([GTRecipeTypes.BENDER_RECIPES, GTRecipeTypes.COMPRESSOR_RECIPES, GTRecipeTypes.FORGE_HAMMER_RECIPES, GTRecipeTypes.FORMING_PRESS_RECIPES])

    // Normal mode-exclusive multis            
    if (!isHardMode) {

        // Simulation Supercomputer
        event.create('simulation_supercomputer', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('simulation_supercomputer')
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
            .appearanceBlock(GCyMBlocks.CASING_ATOMIC)
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("CCCCC", "VEEEV", "VEEEV", "VEEEV", "CCCCC")
                .aisle("CCCCC", "QOOOQ", "VOOOV", "QOOOQ", "CCCCC")
                .aisle("CCCCC", "QOOOQ", "VO OV", "QOOOQ", "CCCCC")
                .aisle("CCCCC", "QOOOQ", "VOOOV", "QOOOQ", "CCCCC")
                .aisle("CC@CC", "VEQEV", "VQQQV", "VEQEV", "CCCCC")
                .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                .where('V', Predicates.blocks(GCyMBlocks.CASING_VIBRATION_SAFE.get()))
                .where('E', Predicates.blocks('gtceu:enderium_block'))
                .where('O', Predicates.blocks('gtceu:omnium_block'))
                .where('Q', Predicates.blocks('ae2:quartz_vibrant_glass'))
                .where('G', Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                .where('C', Predicates.blocks(GCyMBlocks.CASING_ATOMIC.get()).setMinGlobalLimited(40)
                    .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                    .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                    .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                .where(' ', Predicates.air())
                .build())
            .workableCasingRenderer("gtceu:block/casings/gcym/atomic_casing",
                "gtceu:block/multiblock/fusion_reactor", false)

        // Loot Superfabricator
        event.create('loot_superfabricator', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('loot_superfabricator')
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
            .appearanceBlock(GCyMBlocks.CASING_ATOMIC)
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("CCCCC", "VEEEV", "VEEEV", "VEEEV", "CCCCC")
                .aisle("CCCCC", "QOOOQ", "VOOOV", "QOOOQ", "CCCCC")
                .aisle("CCCCC", "QOOOQ", "VO OV", "QOOOQ", "CCCCC")
                .aisle("CCCCC", "QOOOQ", "VOOOV", "QOOOQ", "CCCCC")
                .aisle("CC@CC", "VEQEV", "VQQQV", "VEQEV", "CCCCC")
                .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                .where('V', Predicates.blocks(GCyMBlocks.CASING_SHOCK_PROOF.get()))
                .where('E', Predicates.blocks('gtceu:energetic_alloy_block'))
                .where('O', Predicates.blocks('gtceu:omnium_block'))
                .where('Q', Predicates.blocks('ae2:quartz_vibrant_glass'))
                .where('G', Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                .where('C', Predicates.blocks(GCyMBlocks.CASING_ATOMIC.get()).setMinGlobalLimited(40)
                    .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                    .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                    .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                .where(' ', Predicates.air())
                .build())
            .workableCasingRenderer("gtceu:block/casings/gcym/atomic_casing",
                "gtceu:block/multiblock/fusion_reactor", false)
    }


    // Expert mode-exclusive multis            
    if (isHardMode) {

        // Actualization Chamber
        event.create('actualization_chamber', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('actualization_chamber')
            .appearanceBlock(GTBlocks.FUSION_CASING)
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("XXX", "GGG", "XXX")
                .aisle("XXX", "GOG", "XXX")
                .aisle("X@X", "GGG", "XXX")
                .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                .where('X', Predicates.blocks(GTBlocks.FUSION_CASING.get()).setMinGlobalLimited(9)
                    .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                    .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
                .where('O', Predicates.blocks(GTBlocks.FUSION_COIL.get()))
                .build())
            .workableCasingRenderer("gtceu:block/casings/fusion/fusion_casing",
                "gtceu:block/multiblock/implosion_compressor", false)

        // Universal Crystallizer
        event.create('universal_crystallizer', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('universal_crystallizer')
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])
            .appearanceBlock(GCyMBlocks.CASING_LASER_SAFE_ENGRAVING)
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("XXXXXXX", "XGGGGGX", "XGGGGGX", "XGGGGGX", "XGGGGGX", "XGGGGGX", "XXXXXXX")
                .aisle("XXXXXXX", "G     G", "G     G", "F     F", "G     G", "G     G", "XGGGGGX")
                .aisle("XXXXXXX", "G CCC G", "F C C F", "FTC CTF", "F C C F", "G CCC G", "XGGGGGX")
                .aisle("XXXXXXX", "F CCC F", "FT   TF", "FTBRBTF", "FT   TF", "F CCC F", "XGGGGGX")
                .aisle("XXXXXXX", "G CCC G", "F C C F", "FTC CTF", "F C C F", "G CCC G", "XGGGGGX")
                .aisle("XXXXXXX", "G     G", "G     G", "F     F", "G     G", "G     G", "XGGGGGX")
                .aisle("XXX@XXX", "XGGGGGX", "XGGGGGX", "XGGGGGX", "XGGGGGX", "XGGGGGX", "XXXXXXX")
                .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                .where('X', Predicates.blocks(GCyMBlocks.CASING_LASER_SAFE_ENGRAVING.get()).setMinGlobalLimited(80)
                    .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                    .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                    .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1)))
                .where('C', Predicates.blocks(GTBlocks.FUSION_COIL.get()))
                .where('F', Predicates.blocks("gtceu:berkelium_frame"))
                .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
                .where('T', Predicates.blocks("gtceu:taranium_block"))
                .where('B', Predicates.blocks("kubejs:omnic_matrix_machine_casing"))
                .where('R', Predicates.blocks("kubejs:enderium_micro_miner_core"))
                .where(' ', Predicates.air())
                .build())
            .workableCasingRenderer("gtceu:block/casings/gcym/laser_safe_engraving_casing",
                "gtceu:block/multiblock/gcym/large_autoclave", false)
        
        // Helical Fusion Reactor
        event.create('helical_fusion_reactor', 'multiblock', (holder) => new FusionReactorMachine(holder, GTValues.UHV))
            .rotationState(RotationState.ALL)
            .recipeTypes(GTRecipeTypes.FUSION_RECIPES)
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])
            .appearanceBlock(GCyMBlocks.CASING_ATOMIC)
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("#######################", "#######################", "#######################", "###F##F#N#####N#F##F###", "###FNNFNN#####NNFNNF###", "###F##F#N#####N#F##F###", "#######################", "#######################", "#######################")
                .aisle("#######################", "###F##F###NNN###F##F###", "###F##F##N###N##F##F###", "###ECCBC#######CBCCE###", "###BBBBC#######CBBBB###", "###ECCBC#######CBCCE###", "###F##F##N###N##F##F###", "###F##F###NNN###F##F###", "#######################")
                .aisle("#######################", "###F##F##N###N##F##F###", "##DDDDDDD#####DDDDDDD##", "#CDTTTTTDCCCCCDTTTTTDC#", "#CDTTTTTDCGGGCDTTTTTDC#", "#CDTTTTTDCCCCCDTTTTTDC#", "##DDDDDDD#####DDDDDDD##", "###F##F##N###N##F##F###", "#######################")
                .aisle("###F##F#N#####N#F##F###", "###ECCBC#######CBCCE###", "#CDTTTTTDCCCCCDTTTTTDC#", "C                     C", "C                     C", "C                     C", "#CDTTTTTDCCCCCDTTTTTDC#", "###ECCBC#######CBCCE###", "###F##F#N#####N#F##F###")
                .aisle("###FNNFNN#####NNFNNF###", "###BBBBC#######CBBBB###", "#CDTTTTTDCGGGCDTTTTTDC#", "C                     C", "G                     G", "C                     C", "#CDTTTTTDCGGGCDTTTTTDC#", "###BBBBC#######CBBBB###", "###FNNFNN#####NNFNNF###")
                .aisle("###F##F#N#####N#F##F###", "###ECCBC#######CBCCE###", "#CDTTTTTDCCCCCDTTTTTDC#", "C                     C", "C                     C", "C                     C", "#CDTTTTTDCCCCCDTTTTTDC#", "###ECCBC#######CBCCE###", "###F##F#N#####N#F##F###")
                .aisle("#######################", "###F##F##N###N##F##F###", "##DDDDDDD#####DDDDDDD##", "#CDTTTTTDCC@CCDTTTTTDC#", "#CDTTTTTDCGGGCDTTTTTDC#", "#CDTTTTTDCCCCCDTTTTTDC#", "##DDDDDDD#####DDDDDDD##", "###F##F##N###N##F##F###", "#######################")
                .aisle("#######################", "###F##F###NNN###F##F###", "###F##F##N###N##F##F###", "###ECCBC#######CBCCE###", "###BBBBC#######CBBBB###", "###ECCBC#######CBCCE###", "###F##F##N###N##F##F###", "###F##F###NNN###F##F###", "#######################")
                .aisle("#######################", "#######################", "#######################", "###F##F#N#####N#F##F###", "###FNNFNN#####NNFNNF###", "###F##F#N#####N#F##F###", "#######################", "#######################", "#######################")
                .where('@', Predicates.controller(Predicates.blocks(definition.get())))
                .where('B', Predicates.blocks(GCyMBlocks.CASING_ATOMIC.get()))
                .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get())
                    .or(Predicates.blocks(GCyMBlocks.CASING_ATOMIC.get())))
                .where('E', Predicates.abilities(PartAbility.INPUT_ENERGY).setMinGlobalLimited(1).setMaxGlobalLimited(16).setPreviewCount(16)
                    .or(Predicates.blocks(GCyMBlocks.CASING_ATOMIC.get())))
                .where('C', Predicates.blocks(GCyMBlocks.CASING_ATOMIC.get()).setMinGlobalLimited(130)
                    .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMinGlobalLimited(2))
                    .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMinGlobalLimited(1))
                    .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                    .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1)))
                .where('D', Predicates.blocks(GTBlocks.FUSION_CASING_MK3.get()))
                .where('F', Predicates.blocks(GTBlocks.FUSION_COIL.get()))
                .where('T', Predicates.blocks(GTBlocks.COIL_TRITANIUM.get()))
                .where('N', Predicates.blocks("gtceu:activated_netherite_frame"))
                .where(' ', Predicates.air())
                .where('#', Predicates.any())
                .build())
            .workableCasingRenderer("gtceu:block/casings/gcym/atomic_casing",
                "gtceu:block/multiblock/fusion_reactor", false)
    }

    // Greenhouse
    event.create('greenhouse', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('greenhouse')
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("AAAAA", "UBBBU", "UBBBU", "UUBUU", "#UUU#")
            .aisle("ACCCA", "B###B", "B###B", "BB#BB", "#BBB#")
            .aisle("ACCCA", "B###B", "B###B", "BB#BB", "#BBB#")
            .aisle("ACCCA", "B###B", "B###B", "BB#BB", "#BBB#")
            .aisle("ACCCA", "B###B", "B###B", "BB#BB", "#BBB#")
            .aisle("ACCCA", "B###B", "B###B", "BB#BB", "#BBB#")
            .aisle("AA@AA", "UBBBU", "UBBBU", "UUBUU", "#UUU#")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('A', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()).setMinGlobalLimited(8)
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('U', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()))
            .where('B', Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get())
                .or(Predicates.blockTag(Tags.block("minecraft:doors")).setMaxGlobalLimited(4)))
            .where('C', Predicates.blockTag(Tags.block("minecraft:dirt"))
                .or(Predicates.blocks("minecraft:farmland")))
            .where("#", Predicates.any())
            .build())
        .workableCasingRenderer("gtceu:block/casings/solid/machine_casing_solid_steel",
            "gtceu:block/multiblock/implosion_compressor", false)

    // Rock Cycle Simulator
    event.create('rock_cycle_simulator', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('rock_cycle_simulator')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
        .appearanceBlock(GCyMBlocks.CASING_HIGH_TEMPERATURE_SMELTING)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("CCCCCCC", "CCCCCCC", "CCCCCCC", "CCCCCCC")
            .aisle("CCCCCCC", "TMMOIIT", "TMCCCIT", "CCCCCCC")
            .aisle("CCC@CCC", "CTTTTTC", "CTCCCTC", "CCCCCCC")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('I', Predicates.blocks("minecraft:blue_ice"))
            .where('M', Predicates.blocks("minecraft:magma_block"))
            .where('O', Predicates.blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
            .where('T', Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
            .where('C', Predicates.blocks(GCyMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()).setMinGlobalLimited(20)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer("gtceu:block/casings/gcym/high_temperature_smelting_casing",
            "gtceu:block/machines/rock_crusher", false)

    // Atmospheric Accumulator
    event.create('atmospheric_accumulator', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes(GTRecipeTypes.GAS_COLLECTOR_RECIPES)
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
        .appearanceBlock(GCyMBlocks.CASING_CORROSION_PROOF)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("CCCCC", "C###C", "CCCCC", "C###C", "CCCCC", "C###C", "CCCCC")
            .aisle("CCCCC", "#GIG#", "CGGGC", "#GIG#", "CCCCC", "#GIG#", "CIIIC")
            .aisle("CCCCC", "#IOI#", "CGOGC", "#IOI#", "CCOCC", "#IOI#", "CIOIC")
            .aisle("CCCCC", "#GIG#", "CGGGC", "#GIG#", "CCCCC", "#GIG#", "CIIIC")
            .aisle("CC@CC", "C###C", "CCCCC", "C###C", "CCCCC", "C###C", "CCCCC")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('I', Predicates.blocks(GTBlocks.CASING_ENGINE_INTAKE.get()))
            .where('G', Predicates.blocks(GTBlocks.CASING_GRATE.get()))
            .where('O', Predicates.blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
            .where('C', Predicates.blocks(GCyMBlocks.CASING_CORROSION_PROOF.get()).setMinGlobalLimited(70)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where('#', Predicates.air())
            .build())
        .workableCasingRenderer("gtceu:block/casings/gcym/corrosion_proof_casing",
            "gtceu:block/machines/gas_collector", false)

    // Matter Alterator
    event.create('matter_alterator', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('atomic_reconstruction')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
        .appearanceBlock(GCyMBlocks.CASING_LASER_SAFE_ENGRAVING)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("#CCC#######", "#CGC#######", "#CGC#######", "#CGC#######", "#CCC#######",)
            .aisle("CCCCC#F###F", "C   CCCCCCC", "C   CGGGGGC", "C   CCCCCCC", "CCCCC######",)
            .aisle("CCCCC######", "G CCCCCCCCC", "G F      PC", "G CCCGGGGGC", "CCCCC######",)
            .aisle("CCCCC#F###F", "C   CCCCCCC", "C   CGGGGGC", "C   CCCCCCC", "CCCCC######",)
            .aisle("#C@C#######", "#CGC#######", "#CGC#######", "#CGC#######", "#CCC#######",)
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('G', Predicates.blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
            .where('P', Predicates.blocks("gtceu:palis_block"))
            .where('F', Predicates.blocks("gtceu:hastelloy_c_276_frame"))
            .where('C', Predicates.blocks(GCyMBlocks.CASING_LASER_SAFE_ENGRAVING.get()).setMinGlobalLimited(50)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where(' ', Predicates.air())
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer("gtceu:block/casings/gcym/laser_safe_engraving_casing",
            "gtceu:block/machines/reconstructor", false)

    // Compression Imploder
    event.create('implosion_collider', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes(GTRecipeTypes.IMPLOSION_RECIPES)
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("#########", "####E####", "###EEE###", "####E####", "#########", "#########")
            .aisle("#########", "####E####", "###E2E###", "####E####", "#########", "#########")
            .aisle("###SES###", "###SES###", "##SE ES##", "###SES###", "###SES###", "#########")
            .aisle("##SSESS##", "##SOOOS##", "EEEO OEEE", "##SOOOS##", "##SSESS##", "#########")
            .aisle("##EEEEE##", "EEEOOOEEE", "E4     3E", "EEEOOOEEE", "##EEEEE##", "#########")
            .aisle("##SSESS##", "##SOOOS##", "EEEO OEEE", "##SOOOS##", "##SSESS##", "###SSS###")
            .aisle("###SES###", "##SSESS##", "##SE ES##", "##SS SS##", "###S S###", "###SMS###")
            .aisle("##F###F##", "##SSSSS##", "##SE1ES##", "###SSS###", "###SSS###", "###SSS###")
            .aisle("#########", "###SSS###", "###S@S###", "###SSS###", "#########", "#########")
            .where('@', Predicates.controller(Predicates.blocks(definition.get())))
            .where('S', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where('O', Predicates.blocks("enderio:reinforced_obsidian_block"))
            .where('E', Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get()))
            .where('F', Predicates.blocks("gtceu:black_steel_frame"))
            .where('M', Predicates.abilities(PartAbility.MUFFLER))
            .where('1', Predicates.blocks("minecraft:piston"))
            .where('2', Predicates.blocks("minecraft:piston"))
            .where('3', Predicates.blocks("minecraft:piston"))
            .where('4', Predicates.blocks("minecraft:piston"))
            .where(' ', Predicates.air())
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer("gtceu:block/casings/solid/machine_casing_solid_steel",
            "gtceu:block/multiblock/implosion_compressor", false)

    // Extra Large Chemical Reactor
    event.create('extra_large_chemical_reactor', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('large_chemical_reactor')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK)])
        .appearanceBlock(GTBlocks.CASING_PTFE_INERT)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("#CCCCC#", "#A###A#", "#A###A#", "#A###A#", "#A###A#", "#CCCCC#")
            .aisle("CCCCCCC", "ACCCCCA", "AGGGGGA", "AGGGGGA", "ACCCCCA", "CCCCCCC")
            .aisle("CCCCCCC", "#CPPPC#", "#GKKKG#", "#GKKKG#", "#CPPPC#", "CCCCCCC")
            .aisle("CCCCCCC", "#CPPPC#", "#GKPKG#", "#GKPKG#", "#CPPPC#", "CCCCCCC")
            .aisle("CCCCCCC", "#CPPPC#", "#GKKKG#", "#GKKKG#", "#CPPPC#", "CCCCCCC")
            .aisle("CCCCCCC", "ACCCCCA", "AGGGGGA", "AGGGGGA", "ACCCCCA", "CCCCCCC")
            .aisle("#CC@CC#", "#A###A#", "#A###A#", "#A###A#", "#A###A#", "#CCCCC#")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('C', Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get()).setMinGlobalLimited(43)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1)))
            .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
            .where('P', Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
            .where('A', Predicates.blocks('gtceu:naquadah_alloy_frame'))
            .where('K', Predicates.blocks(GTBlocks.COIL_TRINIUM.get()))
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer("gtceu:block/casings/solid/machine_casing_inert_ptfe",
            "gtceu:block/multiblock/large_chemical_reactor", false)

    // Quintessence Infuser
    event.create('quintessence_infuser', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('quintessence_infuser')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
        .appearanceBlock(() => Block.getBlock('kubejs:dark_soularium_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("#CCC#", "CCCCC", "HGGGH", "HGGGH", "HGGGH", "CCCCC", "#CCC#")
            .aisle("CCCCC", "COOOC", "G#O#G", "G#O#G", "G#O#G", "C#O#C", "CCCCC")
            .aisle("CCCCC", "COPOC", "GOPOG", "GOPOG", "GOPOG", "COPOC", "CCCCC")
            .aisle("CCCCC", "COOOC", "G#O#G", "G#O#G", "G#O#G", "C#O#C", "CCCCC")
            .aisle("#C@C#", "CCCCC", "HGGGH", "HGGGH", "HGGGH", "CCCCC", "#CCC#")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('H', Predicates.blocks('enderio:ensouled_chassis'))
            .where('O', Predicates.blocks('gtceu:tungsten_frame'))
            .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
            .where('P', Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
            .where('C', Predicates.blocks('kubejs:dark_soularium_casing').setMinGlobalLimited(40)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer("kubejs:block/soularium/casing",
            "gtceu:block/multiblock/implosion_compressor", false)

    // Subatomic Digital Assembler
    event.create('subatomic_digital_assembler', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('subatomic_digital_assembly')
        .appearanceBlock(GCyMBlocks.CASING_ATOMIC)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("#CCCCC#", "#CCCCC#", "#CGGGC#", "#CGGGC#", "#CGGGC#", "#CGGGC#", "#CGGGC#", "#CCCCC#", "#CCCCC#")
            .aisle("CCCCCCC", "CHMMMHC", "CH   HC", "CH   HC", "CH   HC", "CH   HC", "CH   HC", "CHMMMHC", "CCCCCCC")
            .aisle("CCCCCCC", "CMXYXMC", "G XYX G", "G XYX G", "G XYX G", "G XYX G", "G XYX G", "CMXYXMC", "CCCCCCC")
            .aisle("CCCCCCC", "CMYYYMC", "G YYY G", "G YYY G", "G YYY G", "G YYY G", "G YYY G", "CMYYYMC", "CCCCCCC")
            .aisle("CCCCCCC", "CMXYXMC", "G XYX G", "G XYX G", "G XYX G", "G XYX G", "G XYX G", "CMXYXMC", "CCCCCCC")
            .aisle("CCCCCCC", "CHMMMHC", "CH   HC", "CH   HC", "CH   HC", "CH   HC", "CH   HC", "CHMMMHC", "CCCCCCC")
            .aisle("CCCCCCC", "CCCCCCC", "#CCCCC#", "#CCCCC#", "#CCCCC#", "#CCCCC#", "#CCCCC#", "CCCCCCC", "CCCCCCC")
            .aisle("CCCCCCC", "#CCCCC#", "#CCCCC#", "#CNNNC#", "###N###", "###N###", "###N###", "#CNNNC#", "CCCCCCC")
            .aisle("#CCCCC#", "##C@C##", "##CCC##", "#######", "#######", "#######", "#######", "#######", "#CCCCC#")
            .where('@', Predicates.controller(Predicates.blocks(definition.get())))
            .where('G', Predicates.blocks(GTBlocks.CLEANROOM_GLASS.get()))
            .where('H', Predicates.blocks(GTBlocks.HIGH_POWER_CASING.get()))
            .where('M', Predicates.blocks("gtceu:crystal_matrix_frame"))
            .where('N', Predicates.blocks("gtceu:naquadah_alloy_frame"))
            .where('X', Predicates.blocks(GTBlocks.COMPUTER_CASING.get()))
            .where('Y', Predicates.blocks(GTBlocks.ADVANCED_COMPUTER_CASING.get()))
            .where('C', Predicates.blocks(GCyMBlocks.CASING_ATOMIC.get()).setMinGlobalLimited(220)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.COMPUTATION_DATA_RECEPTION).setExactLimit(1))
            )
            .where(' ', Predicates.air())
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer("gtceu:block/casings/gcym/atomic_casing",
            "gtceu:block/multiblock/fusion_reactor", false)

    // Discharger
    event.create('discharger', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('discharger')
        .appearanceBlock(() => Block.getBlock('kubejs:cryolobus_casing'))
        .generator(true)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("####CCC####", "####CCC####", "###########", "###########", "###########", "###########", "###########", "###########", "###########", "####CCC####", "####CCC####")
            .aisle("##CCNNNCC##", "##CCcccCC##", "####GGG####", "####GGG####", "####GGG####", "####GGG####", "####GGG####", "####GGG####", "####GGG####", "##CCcccCC##", "##CCNNNCC##")
            .aisle("#CNNCNCNNC#", "#CNcScScNC#", "##NG c GN##", "##NG c GN##", "##NG   GN##", "##NG   GN##", "##NG   GN##", "##NG c GN##", "##NG c GN##", "#CNcScScNC#", "#CNNCNCNNC#")
            .aisle("#CNCCNCCNC#", "#CcSSSSScC#", "##G     G##", "##G     G##", "##G  E  G##", "##G     G##", "##G  E  G##", "##G     G##", "##G     G##", "#CcSSSSScC#", "#CNCCNCCNC#")
            .aisle("CNCCCNCCCNC", "CcSScNcSScC", "#G  cLc  G#", "#G       G#", "#G       G#", "#G       G#", "#G       G#", "#G       G#", "#G  cLc  G#", "CcSScNcSScC", "CNCCCNCCCNC")
            .aisle("CNNNNNNNNNC", "CccSNNNSccC", "#Gc LNL cG#", "#Gc  N  cG#", "#G E N E G#", "#G   T   G#", "#G E N E G#", "#Gc  N  cG#", "#Gc LNL cG#", "CccSNNNSccC", "CNNNNNNNNNC")
            .aisle("CNCCCNCCCNC", "CcSScNcSScC", "#G  cLc  G#", "#G       G#", "#G       G#", "#G       G#", "#G       G#", "#G       G#", "#G  cLc  G#", "CcSScNcSScC", "CNCCCNCCCNC")
            .aisle("#CNCCNCCNC#", "#CcSSSSScC#", "##G     G##", "##G     G##", "##G  E  G##", "##G     G##", "##G  E  G##", "##G     G##", "##G     G##", "#CcSSSSScC#", "#CNCCNCCNC#")
            .aisle("#CNNCNCNNC#", "#CNcScScNC#", "##NG c GN##", "##NG c GN##", "##NG   GN##", "##NG   GN##", "##NG   GN##", "##NG c GN##", "##NG c GN##", "#CNcScScNC#", "#CNNCNCNNC#")
            .aisle("##CCNNNCC##", "##CCcccCC##", "####GGG####", "####GGG####", "####GGG####", "####GGG####", "####GGG####", "####GGG####", "####GGG####", "##CCcccCC##", "##CCNNNCC##")
            .aisle("####CCC####", "####C@C####", "###########", "###########", "###########", "###########", "###########", "###########", "###########", "####CCC####", "####CCC####")
            .where('@', Predicates.controller(Predicates.blocks(definition.get())))
            .where('C', Predicates.blocks("kubejs:cryolobus_casing").setMinGlobalLimited(150)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where('c', Predicates.blocks("kubejs:cryolobus_casing"))
            .where('N', Predicates.blocks(GCyMBlocks.CASING_NONCONDUCTING.get()))
            .where('G', Predicates.blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
            .where('S', Predicates.blocks("minecraft:sculk"))
            .where('T', Predicates.blocks("minecraft:sculk_catalyst"))
            .where('L', Predicates.blocks("gtceu:black_lamp"))
            .where('E', Predicates.blocks(GCyMBlocks.ELECTROLYTIC_CELL.get()))
            .where(' ', Predicates.air())
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer("kubejs:block/cryolobus/cryolobus_casing",
            "gtceu:block/machines/electrolyzer", false)

    // Basic Microverse Projector
    event.create('basic_microverse_projector', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('basic_microverse')
        .appearanceBlock(() => Block.getBlock('kubejs:microverse_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("CMC", "CVC", "CCC")
            .aisle("CCC", "GDG", "CCC")
            .aisle("C@C", "CGC", "CCC")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('D', Predicates.blocks('kubejs:starry_diamond_block'))
            .where('C', Predicates.blocks("kubejs:microverse_casing").setMinGlobalLimited(12)
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('G', Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
            .where('M', Predicates.abilities(PartAbility.MUFFLER))
            .where('V', Predicates.blocks(GTBlocks.CASING_GRATE.get()))
            .build())
        .workableCasingRenderer("kubejs:block/microverse/casing",
            "gtceu:block/multiblock/implosion_compressor", false)

    // Advanced Microverse Projector
    event.create('advanced_microverse_projector', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('advanced_microverse')
        .appearanceBlock(() => Block.getBlock('kubejs:microverse_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("CCCCC", "CGGGC", "CGGGC", "CGGGC", "CCCCC")
            .aisle("CVCVC", "GDDDG", "GDDDG", "GDDDG", "CVCVC")
            .aisle("CCCCC", "GDDDG", "GD DG", "GDDDG", "CCCCC")
            .aisle("CVCVC", "GDDDG", "GDDDG", "GDDDG", "CVCVC")
            .aisle("CC@CC", "CGGGC", "CGGGC", "CGGGC", "CCCCC")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('D', Predicates.blocks('kubejs:starry_diamond_block'))
            .where('C', Predicates.blocks("kubejs:microverse_casing").setMinGlobalLimited(48)
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('G', Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
            .where('V', Predicates.blocks(GTBlocks.CASING_GRATE.get()))
            .where(' ', Predicates.air())
            .build())
        .workableCasingRenderer("kubejs:block/microverse/casing",
            "gtceu:block/multiblock/implosion_compressor", false)

    // Advanced Microverse Projector II
    event.create('advanced_microverse_projector_ii', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('advanced_microverse_ii')
        .appearanceBlock(() => Block.getBlock('kubejs:microverse_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("#########", "#########", "##CCCCC##", "##CVCVC##", "##CCCCC##", "##CVCVC##", "##CCCCC##", "#########", "#########")
            .aisle("#########", "##CGGGC##", "#CDDDDDC#", "#CDDDDDC#", "#CDDDDDC#", "#CDDDDDC#", "#CDDDDDC#", "##CGGGC##", "#########")
            .aisle("##CCCCC##", "#CDDDDDC#", "CDDDDDDDC", "CDDDDDDDC", "CDDDDDDDC", "CDDDDDDDC", "CDDDDDDDC", "#CDDDDDC#", "##CCCCC##")
            .aisle("##CGGGC##", "#GDDDDDG#", "CDDDDDDDC", "GDD   DDG", "GDD   DDG", "GDD   DDG", "CDDDDDDDC", "#GDDDDDG#", "##CGGGC##")
            .aisle("##CGGGC##", "#GDDDDDG#", "CDDDDDDDC", "GDD   DDG", "GDD   DDG", "GDD   DDG", "CDDDDDDDC", "#GDDDDDG#", "##CGGGC##")
            .aisle("##CGGGC##", "#GDDDDDG#", "CDDDDDDDC", "GDD   DDG", "GDD   DDG", "GDD   DDG", "CDDDDDDDC", "#GDDDDDG#", "##CGGGC##")
            .aisle("##CCCCC##", "#CDDDDDC#", "CDDDDDDDC", "CDDDDDDDC", "CDDDDDDDC", "CDDDDDDDC", "CDDDDDDDC", "#CDDDDDC#", "##CCCCC##")
            .aisle("#########", "##CGGGC##", "#CDDDDDC#", "#CDDDDDC#", "#CDDDDDC#", "#CDDDDDC#", "#CDDDDDC#", "##CGGGC##", "#########")
            .aisle("#########", "#########", "##CC@CC##", "##CGGGC##", "##CGGGC##", "##CGGGC##", "##CCCCC##", "#########", "#########")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('D', Predicates.blocks('kubejs:starry_diamond_block'))
            .where('C', Predicates.blocks("kubejs:microverse_casing").setMinGlobalLimited(128)
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('G', Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
            .where('V', Predicates.blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
            .where(' ', Predicates.air())
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer("kubejs:block/microverse/casing",
            "gtceu:block/multiblock/implosion_compressor", false)

    // Microverse Projector III (Hyperbolic Microverse Projector) 
    event.create('hyperbolic_microverse_projector', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes(['basic_microverse', 'advanced_microverse', 'advanced_microverse_ii', 'advanced_microverse_iii'])
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
        .appearanceBlock(() => Block.getBlock('kubejs:microverse_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("###CCCCC###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###CCCCC###")
            .aisle("#CCCCVCCCC#", "###########", "###########", "###########", "###########", "###########", "###########", "###########", "###########", "###########", "#CCCCVCCCC#")
            .aisle("#CVCCCCCVC#", "###CGGGC###", "###########", "###########", "###########", "###########", "###########", "###########", "###########", "###CGGGC###", "#CVCCCCCVC#")
            .aisle("CCCCCCCCCCC", "N#CCDDDCC#N", "N##CGGGC##N", "N#########N", "N#########N", "N#########N", "N#########N", "N#########N", "N##CGGGC##N", "N#CCDDDCC#N", "CCCCCCCCCCC")
            .aisle("CCCCCCCCCCC", "##GDDDDDG##", "###GYDYG###", "####YGY####", "####YGY####", "####YGY####", "####YGY####", "####YGY####", "###GYDYG###", "##GDDDDDG##", "CCCCCCCCCCC")
            .aisle("CVCCCWCCCVC", "##GDDDDDG##", "###GDDDG###", "####GDG####", "####GDG####", "####GDG####", "####GDG####", "####GDG####", "###GDDDG###", "##GDDDDDG##", "CVCCCWCCCVC")
            .aisle("CCCCCCCCCCC", "##GDDDDDG##", "###GYDYG###", "####YGY####", "####YGY####", "####YGY####", "####YGY####", "####YGY####", "###GYDYG###", "##GDDDDDG##", "CCCCCCCCCCC")
            .aisle("CCCCCCCCCCC", "N#CCDDDCC#N", "N##CGGGC##N", "N#########N", "N#########N", "N#########N", "N#########N", "N#########N", "N##CGGGC##N", "N#CCDDDCC#N", "CCCCCCCCCCC")
            .aisle("#CVCCCCCVC#", "###CGGGC###", "###########", "###########", "###########", "###########", "###########", "###########", "###########", "###CGGGC###", "#CVCCCCCVC#")
            .aisle("#CCCCVCCCC#", "###########", "###########", "###########", "###########", "###########", "###########", "###########", "###########", "###########", "#CCCCVCCCC#")
            .aisle("###CC@CC###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###N###N###", "###CCCCC###")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('D', Predicates.blocks('kubejs:starry_diamond_block'))
            .where('C', Predicates.blocks("kubejs:microverse_casing").setMinGlobalLimited(200)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1))
            )
            .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
            .where('N', Predicates.blocks("gtceu:omnium_frame"))
            .where('V', Predicates.blocks("ae2:quartz_vibrant_glass"))
            .where('W', Predicates.blocks("kubejs:universal_warp_core"))
            .where('Y', Predicates.blocks("kubejs:dimensional_stabilization_netherite_casing"))
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer("kubejs:block/microverse/casing",
            "gtceu:block/multiblock/implosion_compressor", false)

    // Naquadah Reactor I
    event.create('naquadah_reactor_i', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('naquadah_reactor_i')
        .appearanceBlock(GCyMBlocks.CASING_REACTION_SAFE)
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])    // Modern#2015
        .generator(true)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("CCC", "PGP", "PGP", "PGP", "CCC")
            .aisle("CCC", "GNG", "GNG", "GOG", "CCC")
            .aisle("C@C", "PGP", "PGP", "PGP", "CCC")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
            .where('C', Predicates.blocks(GCyMBlocks.CASING_REACTION_SAFE.get()).setMinGlobalLimited(12)
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('P', Predicates.blocks("ae2:spatial_pylon"))
            .where('N', Predicates.blocks("gtceu:duranium_block"))
            .where('O', Predicates.blocks("gtceu:black_steel_block"))
            .build())
        .workableCasingRenderer("gtceu:block/casings/gcym/reaction_safe_mixing_casing",
            "gtceu:block/multiblock/generator/large_steam_turbine", false)

    // Naquadah Reactor II
    event.create('naquadah_reactor_ii', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('naquadah_reactor_ii')
        .appearanceBlock(GCyMBlocks.CASING_REACTION_SAFE)
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])    // Modern#2015
        .generator(true)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("CCC", "PGP", "PGP", "PGP", "PGP", "CCC")
            .aisle("CCC", "GNG", "GNG", "GNG", "GOG", "CCC")
            .aisle("C@C", "PGP", "PGP", "PGP", "PGP", "CCC")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
            .where('C', Predicates.blocks(GCyMBlocks.CASING_REACTION_SAFE.get()).setMinGlobalLimited(12)
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('P', Predicates.blocks("ae2:spatial_pylon"))
            .where('N', Predicates.blocks('gtceu:ruthenium_trinium_americium_neutronate_block'))
            .where('O', Predicates.blocks("gtceu:omnium_block"))
            .build())
        .workableCasingRenderer("gtceu:block/casings/gcym/reaction_safe_mixing_casing",
            "gtceu:block/multiblock/generator/large_steam_turbine", false)

    // Omnic Forge
    event.create('omnic_forge', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('omnic_forge')
        .appearanceBlock(() => Block.getBlock('kubejs:omnic_matrix_machine_casing'))
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK)])
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("#########", "#########", "####O####", "###CCC###", "##OCCCO##", "###CCC###", "####O####", "#########", "#########")
            .aisle("#########", "####O####", "##GGOGG##", "##GODOG##", "#OODNDOO#", "##GODOG##", "##GGOGG##", "####O####", "#########")
            .aisle("####O####", "##GGOGG##", "#G     G#", "#G     G#", "OO  D  OO", "#G     G#", "#G     G#", "##GGOGG##", "####O####")
            .aisle("###CCC###", "##GODOG##", "#G     G#", "CO     OC", "CD  D  DC", "CO     OC", "#G     G#", "##GODOG##", "###CCC###")
            .aisle("##OCCCO##", "#OODNDOO#", "OO  D  OO", "CD  D  DC", "CNDDBDDNC", "CD  D  DC", "OO  D  OO", "#OODNDOO#", "##OCCCO##")
            .aisle("###CCC###", "##GODOG##", "#G     G#", "CO     OC", "CD  D  DC", "CO     OC", "#G     G#", "##GODOG##", "###CCC###")
            .aisle("####O####", "##GGOGG##", "#G     G#", "#G     G#", "OO  D  OO", "#G     G#", "#G     G#", "##GGOGG##", "####O####")
            .aisle("#########", "####O####", "##GGOGG##", "##GODOG##", "#OODNDOO#", "##GODOG##", "##GGOGG##", "####O####", "#########")
            .aisle("#########", "#########", "####O####", "###CCC###", "##OC@CO##", "###CCC###", "####O####", "#########", "#########")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('B', Predicates.blocks('gtceu:crystal_matrix_block'))
            .where('N', Predicates.blocks('gtceu:sculk_superconductor_block'))
            .where('D', Predicates.blocks('gtceu:cryolobus_frame'))
            .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
            .where('O', Predicates.blocks('kubejs:omnic_matrix_machine_casing'))
            .where('C', Predicates.blocks('kubejs:omnic_matrix_machine_casing')
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1))
            )
            .where(' ', Predicates.air())
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer(new ResourceLocation('kubejs', 'block/omnium/casing'),
            "gtceu:block/machines/reconstructor", false)

    // Advanced Assembly line (Dimensional Superassembler)
    event.create('dimensional_superassembler', 'multiblock')
        .rotationState(RotationState.ALL)
        .recipeTypes('assembly_line')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK)])
        .appearanceBlock(() => Block.getBlock('kubejs:dimensional_stabilization_netherite_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("#########", "###CCC###", "##CCCCC##", "#CCCCCCC#", "#CCCCCCC#", "#CCCCCCC#", "##CCCCC##", "###CCC###", "#########")
            .aisle("##CCCCC##", "#CCCCCCC#", "CCCCCCCCC", "CCCCCCCCC", "CCCCCCCCC", "CCCCCCCCC", "CCCCCCCCC", "#CCCCCCC#", "##CCCCC##")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("#########", "#I#####I#", "##LLOLL##", "##GF FG##", "##GF FG##", "##RLLLR##", "##LM#ML##", "#I#####I#", "#########")
            .aisle("##CCCCC##", "#CCCCCCC#", "CCCCCCCCC", "CCCCCCCCC", "CCCCCCCCC", "CCCCCCCCC", "CCCCCCCCC", "#CCCCCCC#", "##CCCCC##")
            .aisle("#########", "###CCC###", "##CCCCC##", "#CCCCCCC#", "#CCC@CCC#", "#CCCCCCC#", "##CCCCC##", "###CCC###", "#########")
            .where("@", Predicates.controller(Predicates.blocks(definition.get())))
            .where('C', Predicates.blocks("kubejs:dimensional_stabilization_netherite_casing").setMinGlobalLimited(200)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.INPUT_LASER).setMaxGlobalLimited(1))
            )
            .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
            .where('L', Predicates.blocks(GCyMBlocks.CASING_LARGE_SCALE_ASSEMBLING.get()))
            .where('O', Predicates.blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
            .where('F', Predicates.blocks("kubejs:cryococcus_fusion_casing"))
            .where('R', Predicates.blocks(GTBlocks.CASING_GRATE.get())
                .or(Predicates.abilities(PartAbility.DATA_ACCESS).setExactLimit(1)))
            .where('M', Predicates.blocks("kubejs:omnic_matrix_machine_casing"))
            .where('I', Predicates.blocks("gtceu:infinity_frame"))
            .where(' ', Predicates.air())
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer("kubejs:block/netherite/casing",
            "gtceu:block/multiblock/assembly_line", false)

    // Cryococcal Reverberator
    event.create('cryococcal_reverberator', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('reverberation')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH]) // Modern#2015
        .appearanceBlock(GCyMBlocks.CASING_ATOMIC)
        .generator(true)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("####KKKKKKK####", "####KKKKKKK####", "####NN###NN####", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "######CCC######", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "####NN###NN####", "####KKKKKKK####", "####KKKKKKK####")
            .aisle("##KKKKKKKKKKK##", "##KKKKKKKKKKK##", "##TNN#DDD#NNT##", "##TNN##D##NNT##", "##T####D####T##", "###############", "###############", "###############", "###############", "###############", "###############", "######WWW######", "####CCFFFCC####", "######WWW######", "###############", "###############", "###############", "###############", "###############", "###############", "##T####D####T##", "##TNN##D##NNT##", "##TNN#DDD#NNT##", "##KKKKKKKKKKK##", "##KKKKKKKKKKK##")
            .aisle("#KKKKKKKKKKKKK#", "#KKKKKKKKKKKKK#", "#TT##DDFDD##TT#", "#TT###DFD###TT#", "#TT###DFD###TT#", "##T####D####T##", "##T####D####T##", "##TN#######NT##", "##TN#######NT##", "##TT##TTT##TT##", "##T#########T##", "##T#WW#W#WW#T##", "##TCFFWFWFFCT##", "##T#WW#W#WW#T##", "##T#########T##", "##TT##TTT##TT##", "##TN#######NT##", "##TN#######NT##", "##T####D####T##", "##T####D####T##", "#TT###DFD###TT#", "#TT###DFD###TT#", "#TT##DDFDD##TT#", "#KKKKKKKKKKKKK#", "#KKKKKKKKKKKKK#")
            .aisle("#KKKKKKKKKKKKK#", "#KKKKKKKKKKKKK#", "#N####DDD####N#", "#N#####D#####N#", "#######D#######", "######DFD######", "######DFD######", "##N####D####N##", "##NNN##D##NNN##", "##TTTTTDTTTTT##", "#######D#######", "###W###D###W###", "##CFCCWFWCCFC##", "###W###D###W###", "#######D#######", "##TTTTTDTTTTT##", "##NNN##D##NNN##", "##N####D####N##", "######DFD######", "######DFD######", "#######D#######", "#N#####D#####N#", "#N####DDD####N#", "#KKKKKKKKKKKKK#", "#KKKKKKKKKKKKK#")
            .aisle("KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK", "NN###########NN", "#N###########N#", "###############", "#######D#######", "#######D#######", "######DFD######", "###N##DFD##N###", "###TTTDFDTTT###", "######DFD######", "##W###DFD###W##", "#CFC##DFD##CFC#", "##W###DFD###W##", "######DFD######", "###TTTDFDTTT###", "###N##DFD##N###", "######DFD######", "#######D#######", "#######D#######", "###############", "#N###########N#", "NN###########NN", "KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK")
            .aisle("KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK", "N#D#########D#N", "###############", "###############", "###############", "###############", "#######D#######", "#######D#######", "###TTTTDTTTT###", "#######D#######", "##W####D####W##", "#CFC###D###CFC#", "##W####D####W##", "#######D#######", "###TTTTDTTTT###", "#######D#######", "#######D#######", "###############", "###############", "###############", "###############", "N#D#########D#N", "KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK")
            .aisle("KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK", "#DDD#######DDD#", "##D#########D##", "##D#########D##", "###D#######D###", "###D#######D###", "####D#####D####", "####D#####D####", "##TTDTTTTTDTT##", "####D#####D####", "#W##D#####D##W#", "CFWWD#####DWWFC", "#W##D#####D##W#", "####D#####D####", "##TTDTTTTTDTT##", "####D#####D####", "####D#####D####", "###D#######D###", "###D#######D###", "##D#########D##", "##D#########D##", "#DDD#######DDD#", "KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK")
            .aisle("KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK", "#DFD#######DFD#", "#DFD#######DFD#", "#DFD#######DFD#", "##DFD#####DFD##", "##DFD#####DFD##", "###DFD###DFD###", "###DFD###DFD###", "##TDFDTTTDFDT##", "###DFD###DFD###", "#WWDFD###DFDWW#", "CFFFFD###DFFFFC", "#WWDFD###DFDWW#", "###DFD###DFD###", "##TDFDTTTDFDT##", "###DFD###DFD###", "###DFD###DFD###", "##DFD#####DFD##", "##DFD#####DFD##", "#DFD#######DFD#", "#DFD#######DFD#", "#DFD#######DFD#", "KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK")
            .aisle("KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK", "#DDD#######DDD#", "##D#########D##", "##D#########D##", "###D#######D###", "###D#######D###", "####D#####D####", "####D#####D####", "##TTDTTTTTDTT##", "####D#####D####", "#W##D#####D##W#", "CFWWD#####DWWFC", "#W##D#####D##W#", "####D#####D####", "##TTDTTTTTDTT##", "####D#####D####", "####D#####D####", "###D#######D###", "###D#######D###", "##D#########D##", "##D#########D##", "#DDD#######DDD#", "KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK")
            .aisle("KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK", "N#D#########D#N", "###############", "###############", "###############", "###############", "#######D#######", "#######D#######", "###TTTTDTTTT###", "#######D#######", "##W####D####W##", "#CFC###D###CFC#", "##W####D####W##", "#######D#######", "###TTTTDTTTT###", "#######D#######", "#######D#######", "###############", "###############", "###############", "###############", "N#D#########D#N", "KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK")
            .aisle("KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK", "NN###########NN", "#N###########N#", "###############", "#######D#######", "#######D#######", "######DFD######", "###N##DFD##N###", "###TTTDFDTTT###", "######DFD######", "##W###DFD###W##", "#CFC##DFD##CFC#", "##W###DFD###W##", "######DFD######", "###TTTDFDTTT###", "###N##DFD##N###", "######DFD######", "#######D#######", "#######D#######", "###############", "#N###########N#", "NN###########NN", "KKKKKKKKKKKKKKK", "KKKKKKKKKKKKKKK")
            .aisle("#KKKKKKKKKKKKK#", "#KKKKKKKKKKKKK#", "#N####DDD####N#", "#N#####D#####N#", "#######D#######", "######DFD######", "######DFD######", "##N####D####N##", "##NNN##D##NNN##", "##TTTTTDTTTTT##", "#######D#######", "###W###D###W###", "##CFCCWFWCCFC##", "###W###D###W###", "#######D#######", "##TTTTTDTTTTT##", "##NNN##D##NNN##", "##N####D####N##", "######DFD######", "######DFD######", "#######D#######", "#N#####D#####N#", "#N####DDD####N#", "#KKKKKKKKKKKKK#", "#KKKKKKKKKKKKK#")
            .aisle("#KKKKKKKKKKKKK#", "#KKKKKKKKKKKKK#", "#TT##DDFDD##TT#", "#TT###DFD###TT#", "#TT###DFD###TT#", "##T####D####T##", "##T####D####T##", "##TN#######NT##", "##TN#######NT##", "##TT##TTT##TT##", "##T#########T##", "##T#WW#W#WW#T##", "##TCFFWFWFFCT##", "##T#WW#W#WW#T##", "##T#########T##", "##TT##TTT##TT##", "##TN#######NT##", "##TN#######NT##", "##T####D####T##", "##T####D####T##", "#TT###DFD###TT#", "#TT###DFD###TT#", "#TT##DDFDD##TT#", "#KKKKKKKKKKKKK#", "#KKKKKKKKKKKKK#")
            .aisle("##KKKKKKKKKKK##", "##KKKKKKKKKKK##", "##TNN#DDD#NNT##", "##TNN##D##NNT##", "##T####D####T##", "###############", "###############", "###############", "###############", "###############", "###############", "######WWW######", "####CCFFFCC####", "######WWW######", "###############", "###############", "###############", "###############", "###############", "###############", "##T####D####T##", "##TNN##D##NNT##", "##TNN#DDD#NNT##", "##KKKKKKKKKKK##", "##KKKKKKKKKKK##")
            .aisle("####KKKKKKK####", "####KKK@KKK####", "####NN###NN####", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "######CCC######", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "####NN###NN####", "####KKKKKKK####", "####KKKKKKK####")
            .where('@', Predicates.controller(Predicates.blocks(definition.get())))
            .where('T', Predicates.blocks(GCyMBlocks.CASING_ATOMIC.get()))
            .where('K', Predicates.blocks(GCyMBlocks.CASING_ATOMIC.get()).setMinGlobalLimited(760)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.OUTPUT_LASER).setMaxGlobalLimited(1))
            )
            .where('W', Predicates.blocks('kubejs:cryococcus_casing'))
            .where('F', Predicates.blocks('kubejs:cryococcus_fusion_casing'))
            .where('C', Predicates.blocks('kubejs:cryococcus_fusion_coil'))
            .where('D', Predicates.blocks('kubejs:cryolobus_casing'))
            .where('N', Predicates.blocks('gtceu:naquadah_alloy_frame'))
            .where('#', Predicates.any())
            .build())
        .workableCasingRenderer("gtceu:block/casings/gcym/atomic_casing",
            "gtceu:block/multiblock/hpca", false)
})
